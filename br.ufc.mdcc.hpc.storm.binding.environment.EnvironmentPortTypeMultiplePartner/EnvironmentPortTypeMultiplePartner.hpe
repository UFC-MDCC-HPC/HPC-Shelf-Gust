<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c5904b87007923b74a821c561f452c879bad5e579679b60f872ea8a1bb53a10e371a4895a890a3fcff914a47e27069f23005667dc0390e374d24e6ed67e36c46fb23595fa9619b08b8b25cd5fe0c1e2c365b779bf966ca6895dd94ca44d0a2b738aefc7977aeaa51a33b42a53fd7b93f0d00348fbd019ae22c9326bc3ddc6aa8" isAbstract="true" kind="Qualifier" name="EnvironmentPortTypeMultiplePartner" packagePath="br.ufc.mdcc.hpc.storm.binding.environment">
    <baseType>
      <extensionType>
        <extends>true</extends>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000a7be83ca72fc4207aab5ffc4e509fd8229c5d9cc69950faa5a459e2b53faea2f2897fc2c4da9f9bb47503466804906f0cb7837609b28bd403b12a31f5cdb8706e1078e2940b32476608dda56dff819c4de624f356166c6b1f70962e1725315199cb6af341377e8501ffdced752fcfd93131468641d03bf6eb1e8e97e9adb489b" localRef="base" location="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeSinglePartner/EnvironmentPortTypeSinglePartner.hpe" name="EnvironmentPortTypeSinglePartner" package="br.ufc.mdcc.hpc.storm.binding.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="202" y="189">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds parallel="true" uRef="environment_port_type">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IEnvironmentPortTypeMultiplePartner" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* AUTOMATICALLY GENERATE CODE */&#xA;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeSinglePartner;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner&#xA;{&#xA;&#x9;public interface BaseIEnvironmentPortTypeMultiplePartner : BaseIEnvironmentPortTypeSinglePartner, IQualifierKind &#xA;&#x9;{&#xA;&#x9;}&#xA;}" name="BaseIEnvironmentPortTypeMultiplePartner.cs" srcType="base" uri="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/BaseIEnvironmentPortTypeMultiplePartner.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeSinglePartner/bin/1.0.0.0/BaseIEnvironmentPortTypeSinglePartner.dll</dependency>
        </file>
        <file contents="using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using System.Collections.Generic;&#xA;using MPI;&#xA;using System;&#xA;using System.Runtime.Serialization;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeSinglePartner;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner&#xA;{&#xA;&#x9;public interface IEnvironmentPortTypeMultiplePartner : BaseIEnvironmentPortTypeMultiplePartner, IEnvironmentPortTypeSinglePartner&#xA;&#x9;{&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public interface IScatter&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T[] Value { get; set;} &#xA;&#x9;}&#xA;&#xA;&#x9;public interface IGather&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T[] Value { get; set;}&#xA;&#x9;}&#xA;&#xA;&#x9;public interface IReduce&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T Value { get; set;} &#xA;&#x9;}&#xA;&#xA;&#x9;public interface IScan&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T Value { get; set;} &#xA;&#x9;}&#xA;&#xA;&#x9;[DataContract]&#xA;&#x9;internal class Scatter_&lt;T> : IScatter&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T[] values;&#xA;&#xA;&#x9;&#x9;#region IScatter implementation&#xA;&#x9;&#x9;[DataMember]&#xA;&#x9;&#x9;public T[] Value {&#xA;&#x9;&#x9;&#x9;get { return this.values; }&#xA;&#x9;&#x9;&#x9;set { this.values = value; }&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;public void check_size(int remote_size)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (Value.Length != remote_size)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a scatter object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public class Scatter&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IScatter&lt;U> create (Intercommunicator comm, U[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a scatter object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IScatter&lt;U> res = new Scatter_&lt;U> ();&#xA;&#x9;&#x9;&#x9;res.Value = values;&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;[DataContract]&#xA;&#x9;internal class Gather_&lt;T> : IGather&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T[] values;&#xA;&#xA;&#x9;&#x9;#region IGather implementation&#xA;&#xA;&#x9;&#x9;[DataMember]&#xA;&#x9;&#x9;public T[] Value {&#xA;&#x9;&#x9;&#x9;get { return this.values; }&#xA;&#x9;&#x9;&#x9;set { this.values = value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;&#xA;&#x9;public class Gather&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IGather&lt;U> create (Intercommunicator comm, U[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a gather object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IGather&lt;U> res = new Gather_&lt;U> ();&#xA;&#x9;&#x9;&#x9;res.Value = values;&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public delegate T Operator&lt;T> (T v1, T v2);&#xA;&#xA;&#xA;&#x9;[DataContract]&#xA;&#x9;internal class Reduce_&lt;T> : IReduce&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#xA;&#x9;&#x9;#region IReduce implementation&#xA;&#xA;&#x9;&#x9;[DataMember]&#xA;&#x9;&#x9;public T Value {&#xA;&#x9;&#x9;&#x9;get { return this.value; }&#xA;&#x9;&#x9;&#x9;set { this.value = value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;/* The operator is defined in subclasses of IEnvironmentPortTypeMultipleClass, in such a way they may be informed by the user. &#xA;&#x9;&#x9; * So, the binding implementation, which know the proper subclass, may get the corret operator.&#xA;&#x9;&#x9; */&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public class Reduce&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IReduce&lt;U> create (Intercommunicator comm, U[] values, Operator&lt;U> op, U v0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a reduce object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;U value = v0;&#xA;&#xA;&#x9;&#x9;&#x9;// apply the operator&#xA;&#x9;&#x9;&#x9;foreach (U v in values)&#xA;&#x9;&#x9;&#x9;&#x9;value = op(value, v);&#xA;&#xA;&#x9;&#x9;&#x9;IReduce&lt;U> res = new Reduce_&lt;U>();&#xA;&#x9;&#x9;&#x9;res.Value = value;&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;[DataContract]&#xA;&#x9;internal class Scan_&lt;T> : IScan&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#xA;&#x9;&#x9;#region IScan implementation&#xA;&#xA;&#x9;&#x9;[DataMember]&#xA;&#x9;&#x9;public T Value {&#xA;&#x9;&#x9;&#x9;get { return this.value; }&#xA;&#x9;&#x9;&#x9;set { this.value = value; }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;/* The operator is defined in subclasses of IEnvironmentPortTypeMultipleClass, in such a way they may be informed by the user. &#xA;&#x9;&#x9; * So, the binding implementation, which know the proper subclass, may get the corret operator.&#xA;&#x9;&#x9; */&#xA;&#x9;}&#xA;&#xA;&#x9;public class Scan&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IScan&lt;U> create (Intercommunicator comm, U[] values, Operator&lt;U> op, U v0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int rank = comm.Rank;&#xA;&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a scan object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;U value = v0;&#xA;&#xA;&#x9;&#x9;&#x9;// apply the operator&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;rank; i++)&#xA;&#x9;&#x9;&#x9;&#x9;value = op(value, values[i]);&#xA;&#xA;&#x9;&#x9;&#x9;IScan&lt;U> res = new Scan_&lt;U>();&#xA;&#x9;&#x9;&#x9;res.Value = value;&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}" name="IEnvironmentPortTypeMultiplePartner.cs" srcType="user" uri="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/IEnvironmentPortTypeMultiplePartner.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/BaseIEnvironmentPortTypeMultiplePartner.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeSinglePartner/bin/1.0.0.0/IEnvironmentPortTypeSinglePartner.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="57" w="308" x="44" y="86">
        <color b="144" g="238" r="144"/>
      </visualDescription>
    </interface>
    <unit facet="0" iRef="IEnvironmentPortTypeMultiplePartner" multiple="true" private="false" replica="0" uRef="environment_port_type" visibleInterface="true">
      <super cRef="base" uRef="environment_port_type"/>
      <visualDescription h="57" w="202" x="17" y="341"/>
    </unit>
  </componentInfo>
</component:component>