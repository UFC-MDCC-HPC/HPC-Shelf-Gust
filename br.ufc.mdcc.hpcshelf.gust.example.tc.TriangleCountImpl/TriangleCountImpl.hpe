<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000021d66e576358bcd8ed05d9a5409fbe26b93429190d0614d63b300aa45d15627169bb5079d0fb7cb6f4d530fb91c44cb02581cc95e2f630c7c9192afbc9d888865d7a218e810ab88b985e9d1c5eb267b36a8404bd855cb7ac045e49fa70ba1cc7894f6e61aa988c104d8e7b392855cf50f8b1962d6cd6c086f4a9b9134fed6fa5" isAbstract="false" kind="Computation" name="TriangleCountImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.example.tc">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e390ee2948887928f9973b50c59fd93fe2d93bf41d297e1e92ef99cb979ee7eefb1d47c9b133776813410e1531047bcf3eb86598cf3a537faed825a369d2008fee25c11701113ea6a5520be4deb6164e9ba215820ac586f5a4954008d6c3294125099381f98b1b2c1afc059deb9bbb92fa98437472c86b692138f9f725052c91" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/TriangleCount.hpe" name="TriangleCount" package="br.ufc.mdcc.hpcshelf.gust.example.tc" version="1.0.0.0">
        <visualDescription h="60" w="100" x="359" y="339">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="181" x="108" y="317">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###1641439734"/>
          <parameter formFieldId="key_type" varName="TKey"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="137" y="20"/>
          </unitBounds>
        </port>
        <port localRef="output" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="134" x="520" y="323">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###1102679976"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="9" y="20"/>
          </unitBounds>
        </port>
        <port localRef="graph_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="56" w="225" x="104" y="405">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###2105966669"/>
          <parameter formFieldId="key_type" varName="X###156336029"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="189" y="15"/>
          </unitBounds>
        </port>
        <port localRef="output_gif" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="157" x="521" y="400">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###1167139122"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="reduce_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="ITriangleCountImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeBasic;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl &#xA;{&#xA;&#x9;public abstract class BaseITriangleCountImpl: Computation, BaseITriangleCount&#xA;&#x9;{&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> output_gif = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> Output_gif&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_gif == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_gif = (IIterator&lt;IKVPair&lt;IInteger, IInputFormat>>) Services.getPort(&quot;output_gif&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_gif;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> graph = null;&#xA;&#x9;&#x9;public IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> Graph&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph = (IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>>) Services.getPort(&quot;graph&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;//&#x9;&#x9;private IData continuation_value = null;&#x9;&#x9;&#xA;//&#x9;&#x9;protected IData Continuation_value&#xA;//&#x9;&#x9;{&#xA;//&#x9;&#x9;&#x9;get&#xA;//&#x9;&#x9;&#x9;{&#xA;//&#x9;&#x9;&#x9;&#x9;if (this.continuation_value == null)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;this.continuation_value = (IData) Services.getPort(&quot;continuation_value&quot;);&#xA;//&#x9;&#x9;&#x9;&#x9;return this.continuation_value;&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IDataTriangle>> input_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IDataTriangle>> Input_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IInteger, IIterator&lt;IDataTriangle>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> graph_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> Graph_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph_values = (IKVPair&lt;IInteger, IIterator&lt;IInputFormat>>) Services.getPort(&quot;graph_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IDataTriangle>> output = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IDataTriangle>> Output&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output = (IIterator&lt;IKVPair&lt;IInteger, IDataTriangle>>) Services.getPort(&quot;output&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseITriangleCountImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/BaseITriangleCountImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.common.Integer/bin/1.0.0.0/IInteger.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.InputFormat/bin/1.0.0.0/IInputFormat.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle/bin/1.0.0.0/IDataTriangle.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/bin/1.0.0.0/BaseITriangleCount.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Concurrent;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeBasic;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl {&#xA;&#x9;public class ITriangleCountImpl : BaseITriangleCountImpl, ITriangleCount {&#xA;&#xA;&#x9;&#x9;private IUndirectedGraphInstance&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>, int, IEdgeInstance&lt;IVertexBasic, int>> g = null;&#xA;&#x9;&#x9;private int[] partition = null;&#xA;&#x9;&#x9;private int partid = 0;&#xA;&#x9;&#x9;private int partition_size = 0;&#xA;&#x9;&#x9;private bool newInstance = true;&#xA;&#x9;&#x9;private ConcurrentDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>> messages = new ConcurrentDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>>();&#xA;&#xA;&#x9;&#x9;public override void main() {}&#xA;&#x9;&#x9;public override void after_initialize() { }&#xA;&#xA;&#x9;&#x9;public bool isGhost(int v){ return this.partition [v - 1] != this.partid; }&#xA;&#x9;&#x9;public void graph_creator(){ //Chamado uma vez pelo processo Redutor&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>> input_gifs_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>>)Graph_values.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInputFormat> vgifs = (IIteratorInstance&lt;IInputFormat>)input_gifs_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;if (newInstance){&#xA;&#x9;&#x9;&#x9;&#x9;if (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IInputFormatInstance gif = (IInputFormatInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// grava-se informa&#xe7;&#xf5;es que poder&#xe3;o auxiliar nas decis&#xf5;es de emiss&#xe3;o de KVPairs&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition = gif.PartitionTABLE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partid = gif.PARTID; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_size = gif.PARTITION_SIZE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g = Graph.newInstance (gif.VSIZE); // pega-se instancia do graph, com previs&#xe3;o de tamanho para VSIZE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingLoops = false; // n&#xe3;o ser&#xe3;o premitidos la&#xe7;os&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingMultipleEdges = false; // n&#xe3;o ser&#xe3;o permitidas m&#xfa;ltiplas arestas&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;graph_creator_aux (gif); // inserem-se dados no grafo&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newInstance = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;graph_creator_aux ((IInputFormatInstance)o);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void graph_creator_aux(IInputFormatInstance gif){ //funcao privada auxiliar de graph_creator()&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; gif.ESIZE;) {&#xA;&#x9;&#x9;&#x9;&#x9;if (gif.Target [i] != 0) { // Ser&#xe1; usada a forma canonica: i->j, onde i&lt;j&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int s = gif.Source [i] &lt; gif.Target [i] ? gif.Source [i] : gif.Target [i]; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int t = gif.Source [i] > gif.Target [i] ? gif.Source [i] : gif.Target [i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (s);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.noSafeAdd (s, t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;i++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>> output_gifs_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>>)Output_gif.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IInputFormat> item = (IKVPairInstance&lt;IInteger,IInputFormat>)Output_gif.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = gif.PARTID;&#xA;&#x9;&#x9;&#x9;item.Value = gif;&#xA;&#x9;&#x9;&#x9;output_gifs_instance.put (item); // emite-se gif novamente: para a func&#xe3;o de particionamento do conector setar o PartitionTABLE.&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void pull(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IDataTriangle>> input_values_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IDataTriangle>>)Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IIntegerInstance ikey = (IIntegerInstance)input_values_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IDataTriangle> ivalues = (IIteratorInstance&lt;IDataTriangle>)input_values_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;while (ivalues.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;&#xA;&#x9;&#x9;&#x9;&#x9;if(!messages.TryGetValue(ikey.Value, out l)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;l = new List&lt;KeyValuePair&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messages[ikey.Value] = l;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;l.Add(new KeyValuePair&lt;int,int>( ((IDataTriangleInstance) o).V, ((IDataTriangleInstance) o).W ) );&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void startup_push(){ // Chamado uma vez pelo processo Redutor, ap&#xf3;s graph_creator() ser completado. Aqui come&#xe7;a o algoritmo&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;int v, ordered, i, j;&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;int> V = g.vertexSet ().GetEnumerator ();&#xA;&#x9;&#x9;&#x9;while (V.MoveNext ()) { // itera em todo vertice da particao partid&#xA;&#x9;&#x9;&#x9;&#x9;v = V.Current;&#xA;&#x9;&#x9;&#x9;&#x9;if (!isGhost(v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> vneighbors = g.iteratorNeighborsOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (vneighbors.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int bigger = vneighbors.Current;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (v &lt; bigger) { //busca nos vizinhos os v&#xe9;rices maiores&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isGhost(bigger)) { // fantasma: true se bigger estiver fora da particao local&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataTriangle> item = (IKVPairInstance&lt;IInteger,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IIntegerInstance ok = (IIntegerInstance)item.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IDataTriangleInstance ov = (IDataTriangleInstance)item.Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ok.Value = bigger;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.V = v;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!messages.TryGetValue(bigger, out l)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l = new List&lt;KeyValuePair&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages[bigger] = l;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;l.Add (new KeyValuePair&lt;int,int>(v,0));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void gust0(){&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>>)Output.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;ConcurrentDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>> buffer_tmp = new ConcurrentDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>>();&#xA;&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;int> next = messages.Keys.GetEnumerator();&#xA;&#xA;&#x9;&#x9;&#x9;while(next.MoveNext()){&#xA;&#x9;&#x9;&#x9;&#x9;int w = next.Current;//kv.Key;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;// = kv.Value;&#xA;&#x9;&#x9;&#x9;&#x9;messages.TryRemove(w, out l);&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> wneighbors = g.iteratorNeighborsOf (w);&#xA;&#x9;&#x9;&#x9;&#x9;while (wneighbors.MoveNext ()) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int z = wneighbors.Current;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (w &lt; z) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int,int> kvw in l) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int v = kvw.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isGhost (v)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataTriangle> item = (IKVPairInstance&lt;IInteger,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IIntegerInstance ok = (IIntegerInstance)item.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IDataTriangleInstance ov = (IDataTriangleInstance)item.Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ok.Value = v;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.V = z;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ov.W = w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> lz;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!buffer_tmp.TryGetValue(v, out lz)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lz = new List&lt;KeyValuePair&lt;int,int>> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;buffer_tmp[v] = lz;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lz.Add (new KeyValuePair&lt;int,int>(z,w));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;messages = buffer_tmp;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void gust1(){&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataTriangle>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;IEnumerator&lt;int> next = messages.Keys.GetEnumerator();&#xA;&#x9;&#x9;&#x9;while(next.MoveNext()){&#xA;&#x9;&#x9;&#x9;&#x9;int v = next.Current;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;KeyValuePair&lt;int,int>> l;// = kv.Value;&#xA;&#x9;&#x9;&#x9;&#x9;messages.TryRemove(v, out l);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;ICollection&lt;int> vneighbors = g.neighborsOf (v); // devolve ISet&lt;int>, de modo que Contains() &#xe9; O(1)&#xA;&#x9;&#x9;&#x9;&#x9;foreach(KeyValuePair&lt;int,int> kv in l){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int z = kv.Key;//dt.V;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int w = kv.Value;//dt.W;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (vneighbors.Contains (z)) { //Se z &#xe9; vizinho de v, forma-se um triangulo&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Descomentar para imprimir todos os triangulos&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataTriangle> item = (IKVPairInstance&lt;IInteger,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = v;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;&#x9;item.Value = dt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;count++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataTriangle> item = (IKVPairInstance&lt;IInteger,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = count;&#xA;&#x9;&#x9;&#x9;//IDataTriangleInstance dt = ((IDataTriangleInstance)item.Value);&#xA;&#x9;&#x9;&#x9;//item.Value = dt;&#xA;&#x9;&#x9;&#x9;output_value_instance.put (item);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private int count = 0;&#xA;&#x9;}&#xA;}&#xA;" name="ITriangleCountImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/ITriangleCountImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCountImpl/bin/1.0.0.0/BaseITriangleCountImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.TriangleCount/bin/1.0.0.0/ITriangleCount.dll</dependency>
        </file>
      </sources>
      <visualDescription h="43" w="199" x="123" y="157">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="ITriangleCountImpl" multiple="false" private="false" replica="0" uRef="reduce_function" visibleInterface="true">
      <super cRef="base" uRef="reduce_function"/>
      <visualDescription h="40" w="190" x="298" y="246"/>
    </unit>
  </componentInfo>
</component:component>