<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000041f52125a548bb8f8ab734683f4fce18b218e3fb9a4d6e1fa344bc6e1e38b866563392a3f7e08de422490c963176f78c30579ffbf6ba020b7f8aeaa14ba3cf39bc17572bf29abeece1672ba2172f6a27c59262efa49386150d22c08b0bafff083f867288ba824ac15fb3477141685bb770ca61e749f85d14f119e0352de11b8c" isAbstract="false" kind="Computation" name="WorkflowImpl" packagePath="config.phase3.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f733c0c6d0812fdda439dd5ef9886c4474141cbe0092f984ff87bdf9d76680a4a156edf8a51582deaacbe6199b8166f916868ba710a330400415ce975951512f17504c0de8cbc25958579dd09936482a3cfe744e1c8090aff45532108e445ba53d1e3e89439ded3071d3ed88313e9f17b43acc0ea1ad13685e7f7cb3e4b8a3a8" localRef="base" location="config.phase3.Workflow/Workflow.hpe" name="Workflow" package="config.phase3" version="1.0.0.0">
        <visualDescription h="50" w="100" x="363" y="292">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="maintainer" varName="M"/>
        <port localRef="platform_SAFe" location="br.ufc.mdcc.hpcshelf.platform.Platform/Platform.hpe" multiple="false" name="Platform" package="br.ufc.mdcc.hpcshelf.platform" exposed="true">
          <visualDescription h="39" w="145" x="112" y="287">
            <color b="20" g="20" r="20"/>
          </visualDescription>
          <parameter formFieldId="maintainer" varName="M"/>
          <unitBounds parallel="true" uRef="node">
            <visualDescription h="30" w="20" x="140" y="19"/>
          </unitBounds>
        </port>
        <port localRef="task_gusty0" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="231" x="109" y="350">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###1906921857"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_gusty2" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="240" x="157" y="428">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###589702771"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_split_first" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="251" x="572" y="206">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###497441292"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_split_next" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="270" x="616" y="318">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###341956873"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_data" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="249" x="610" y="261">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###602925139"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_step2" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="248" x="659" y="373">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###1534964627"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_gusty1" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="60" w="245" x="650" y="421">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###429434578"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_step1" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="60" w="247" x="397" y="463">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###1961898526"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="workflow_unit">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent localRef="maintainer" location="br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost/SAFeHost.hpe" multiple="false" name="SAFeHost" package="br.ufc.mdcc.hpcshelf.platform.maintainer" exposed="false">
      <visualDescription h="100" w="100" x="0" y="0">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="safe_host">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="maintainer" direct="true" varName="M"/>
    <interface iRef="IWorkflowImpl" nArgs="1">
      <slice isRef="task_gusty1">
        <originRef cRef="task_gusty1" iRef="ITaskPort"/>
        <visualDescription h="10" w="10" x="143" y="11"/>
      </slice>
      <slice isRef="task_gusty0">
        <originRef cRef="task_gusty0" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_gusty2">
        <originRef cRef="task_gusty2" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_split_first">
        <originRef cRef="task_binding_split_first" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_data">
        <originRef cRef="task_binding_data" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_split_next">
        <originRef cRef="task_binding_split_next" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="platform_SAFe">
        <originRef cRef="platform_SAFe" iRef="IProcessingNode"/>
        <visualDescription h="20" w="20" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_step1">
        <originRef cRef="task_binding_step1" iRef="ITaskPort"/>
        <visualDescription h="10" w="10" x="141" y="33"/>
      </slice>
      <slice isRef="task_binding_step2">
        <originRef cRef="task_binding_step2" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="// ------------------------------------------------------------------------------&#xA;//  &lt;autogenerated>&#xA;//      This code was generated by a tool.&#xA;//      Mono Runtime Version: 4.0.30319.17020&#xA;// &#xA;//      Changes to this file may cause incorrect behavior and will be lost if &#xA;//      the code is regenerated.&#xA;//  &lt;/autogenerated>&#xA;// ------------------------------------------------------------------------------&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;using System;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpcshelf.gust.port.task.TaskPortTypeAdvance;&#xA;using br.ufc.mdcc.hpcshelf.gust.port.task.TaskPortTypeData;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost;&#xA;using config.phase3.Workflow;&#xA;&#xA;&#xA;namespace config.phase3.impl.WorkflowImpl {&#xA;    &#xA;    &#xA;&#x9;public class IWorkflowImpl&lt;M> :br.ufc.pargo.hpe.kinds.Computation ,IWorkflow&lt;M> &#xA;&#x9;&#x9;where M:ISAFeHost&#xA;&#x9;{&#xA;        &#xA;&#x9;&#x9;private void read_data_source()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;read_data_source&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;private void split_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;join_step0_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void gusty0_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;gusty0_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void gusty1_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;gusty1_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void step1_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;step1_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void step2_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;step2_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void gusty2_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;gusty2_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void write_sink_source()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;write_sink_source&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void main() &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.TraceFlag = Task_gusty0.TraceFlag = Task_gusty1.TraceFlag = Task_gusty2.TraceFlag = Task_binding_step1.TraceFlag = Task_binding_step2.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;&#xA;&#x9;&#x9;&#x9;Task_binding_data.TraceFlag = Task_binding_step1.TraceFlag = Task_binding_step2.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;&#xA;&#xA;&#x9;&#x9;&#x9;IActionFutureSet future_iteration = null;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 2-1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_split_first_chunk_ready = null;&#xA;&#x9;&#x9;    Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_first_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_split_first_chunk_ready = future_split_first_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration = future_split_first_chunk_ready.createSet ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 2-2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_split_next_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_split_next_chunk_ready = future_split_next_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_next_chunk_ready)&#x9;;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 3&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_gusty0_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_gusty0.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty0_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_gusty0_chunk_ready = future_gusty0_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_gusty0_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_gusty1_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_gusty1.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty1_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_gusty1_chunk_ready = future_gusty1_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_gusty1_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4-4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_step1_chunk_ready = null; &#xA;&#x9;&#x9;&#x9;Task_binding_step1.invoke (ITaskPortAdvance.CHUNK_READY, out future_step1_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_step1_chunk_ready = future_step1_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_step1_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4-5&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_step2_chunk_ready = null; &#xA;&#x9;&#x9;&#x9;Task_binding_step2.invoke (ITaskPortAdvance.CHUNK_READY, out future_step2_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_step2_chunk_ready = future_step2_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_step2_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_gusty2_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_gusty2.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty2_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_gusty2_chunk_ready = future_gusty2_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_gusty2_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 5&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_data_terminate = null; &#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.TERMINATE, out future_data_terminate);&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_data_terminate);&#xA;&#x9;&#x9;&#x9;int action_id_data_terminate = future_data_terminate.GetHashCode ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 6-1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.READ_SOURCE);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 6-2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 7&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IList&lt;Thread> bag_of_tasks = new List&lt;Thread> ();&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;bool terminate = false;&#xA;&#x9;&#x9;&#x9;do &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 8 - LOOP&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture action = future_iteration.waitAny ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int action_id = action.GetHashCode();&#xA;&#x9;&#x9;&#x9;&#x9;if (action_id == action_id_split_first_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t1 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY0 READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty0.invoke (ITaskPortAdvance.READ_CHUNK); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY0 READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_gusty0_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_gusty0_perform = Task_gusty0.invoke (ITaskPortAdvance.PERFORM, gusty0_perform, out future_gusty0_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE SPLITTER CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t1.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t2 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER READ_CHUNK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER PERFORM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER READ_CHUNK/PERFORM - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_chunk_ready_ = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_split_first_chunk_ready = future_split_chunk_ready_.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t2);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t2.Start();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_gusty0_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty0.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty0_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_gusty0_chunk_ready = future_gusty0_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_gusty0_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE STEP1 READ_CHUNK - BEFORE&quot;);  // 110 executados (o 48 completou nos pares, mas n&#xe3;o progrediu aqui (????), motivo do erro.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_step1.invoke (ITaskPortAdvance.READ_CHUNK);   // &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE STEP1 READ_CHUNK - AFTER&quot;);   // 47 completados &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_step1_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_step1_perform = Task_binding_step1.invoke (ITaskPortAdvance.PERFORM, step1_perform, out future_step1_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE GUSTY0 CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_step1_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_step1.invoke (ITaskPortAdvance.CHUNK_READY, out future_step1_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_step1_chunk_ready = future_step1_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_step1_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY1 READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty1.invoke (ITaskPortAdvance.READ_CHUNK); // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY1 READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_gusty1_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_gusty1_perform = Task_gusty1.invoke (ITaskPortAdvance.PERFORM, gusty1_perform, out future_gusty1_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE STEP1 CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_gusty1_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty1.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty1_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_gusty1_chunk_ready = future_gusty1_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_gusty1_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE STEP2 NEXT READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_step2.invoke (ITaskPortAdvance.READ_CHUNK);  // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE STEP2 NEXT READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_step2_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_step2_perform = Task_binding_step2.invoke (ITaskPortAdvance.PERFORM, step2_perform, out future_step2_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE GUSTY1 CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_step2_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_step2.invoke (ITaskPortAdvance.CHUNK_READY, out future_step2_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_step2_chunk_ready = future_step2_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_step2_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY2 READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty2.invoke (ITaskPortAdvance.READ_CHUNK); // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY2 READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_gusty2_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_gusty2_perform = Task_gusty2.invoke (ITaskPortAdvance.PERFORM, gusty2_perform, out future_gusty2_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE STEP2 CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_gusty2_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty2.invoke (ITaskPortAdvance.CHUNK_READY, out future_gusty2_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_gusty2_chunk_ready = future_gusty2_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_gusty2_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);  // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_split_perform = Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, split_perform, out future_split_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE GUSTY2 CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if  (action_id == action_id_split_next_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t1 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY0 READ_CHUNK NEXT - BEFORE&quot;);  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_gusty0.invoke (ITaskPortAdvance.READ_CHUNK);   // &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE GUSTY0 READ_CHUNK NEXT - AFTER&quot;);    &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_gusty0_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_gusty0_perform = Task_gusty0.invoke (ITaskPortAdvance.PERFORM, gusty0_perform, out future_gusty0_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE SPLIT NEXT CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t1.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t2 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT PERFORM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK/PERFORM - AFTER&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_next_chunk_ready_ = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_split_next_chunk_ready = future_split_next_chunk_ready_.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_next_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t2);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t2.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 5&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_data_terminate)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE DATA WRITE_SINK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.WRITE_SINK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE DATA WRITE_SINK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;terminate = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 6&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;UNEXPECTED ERROR: ACTION FUTURE NOT RECOGNIZED ! &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;} while (!terminate) ;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine(&quot;WORKFLOW FINISHED ! &quot;);&#xA;&#xA;&#x9;&#x9;&#x9;foreach (Thread t in bag_of_tasks)&#xA;&#x9;&#x9;&#x9;&#x9;t.Join ();&#xA;&#xA;        }&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeData> task_binding_data = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeData> Task_binding_data &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_binding_data == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_data = (ITaskPort&lt;ITaskPortTypeData>)this.Services.getPort (&quot;task_binding_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_data;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_first = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_first&#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   if (task_binding_split_first == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_split_first = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_split_first&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_split_first;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_next = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_next&#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   if (task_binding_split_next == null)&#xA;&#x9;&#x9;&#x9;&#x9;task_binding_split_next = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_split_next&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_split_next;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_step1 = null; //meio&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_step1 &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_binding_step1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_step1 = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_step1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_step1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_step2 = null; //shuffle&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_step2 &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_binding_step2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_step2 = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_step2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_step2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_gusty1 = null; // meio&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_gusty1 &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_gusty1 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_gusty1 = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_gusty1&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_gusty1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_gusty2 = null; //reduce&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_gusty2 &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_gusty2 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_gusty2 = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_gusty2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_gusty2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_gusty0 = null; //map&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_gusty0 &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{  &#xA;&#x9;&#x9;&#x9;&#x9;if (task_gusty0 == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_gusty0 = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_gusty0&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_gusty0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;    }&#xA;}&#xA;" name="IWorkflowImpl.cs" srcType="user" uri="config.phase3.impl.WorkflowImpl/bin/1.0.0.0/IWorkflowImpl.dll" versionId="1.0.0.0"/>
      </sources>
      <visualDescription h="36" w="137" x="245" y="134">
        <color b="20" g="20" r="20"/>
      </visualDescription>
      <port name="task_gusty1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_gusty1" sRef="task_gusty1"/>
      </port>
      <port name="task_gusty0">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_gusty0" sRef="task_gusty0"/>
      </port>
      <port name="task_gusty2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_gusty2" sRef="task_gusty2"/>
      </port>
      <port name="task_binding_split_first">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split_first" sRef="task_binding_split_first"/>
      </port>
      <port name="task_binding_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_data" sRef="task_binding_data"/>
      </port>
      <port name="task_binding_split_next">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split_next" sRef="task_binding_split_next"/>
      </port>
      <port name="platform_SAFe">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="platform_SAFe" sRef="platform_SAFe"/>
      </port>
      <port name="task_binding_step1">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_step1" sRef="task_binding_step1"/>
      </port>
      <port name="task_binding_step2">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_step2" sRef="task_binding_step2"/>
      </port>
      <parameter iname="ISAFeHost" order="0" parid="maintainer" uname="safe_host" varid="M"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IWorkflowImpl" multiple="false" private="false" replica="0" uRef="workflow_unit" visibleInterface="true">
      <super cRef="base" uRef="workflow_unit"/>
      <visualDescription h="43" w="158" x="286" y="211"/>
    </unit>
  </componentInfo>
</component:component>