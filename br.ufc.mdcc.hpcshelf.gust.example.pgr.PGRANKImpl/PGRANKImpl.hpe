<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000008964e6f1ea457312c48398f70d29759a220ec675b46ac9b3d3f6f5ab2145ca1b7da44731020ff4b0815442447a5ae0b6ac189dbb0aee8c67c940ba728e1c0dacb72364ae04faf1389b71366fc8b93ce0968d9b9f1c831ac51dce73b39dff4e7e76f298924ffd543f779a355fbc21a146a8069304257f07323097377c1ba092a2" isAbstract="false" kind="Computation" name="PGRANKImpl" packagePath="br.ufc.mdcc.hpcshelf.gust.example.pgr">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="00240000048000009400000006020000002400005253413100040000110000007d9b6875e90ece6a1bb096a47271dc6b048e1f7d6811d8a77c66502e2a2aad100fc34cc94c1417bb7d60ff2e2cc604a26d3cf2bcbc5d07b9df8b8d09688f841d1af5fe32b88ff7c5e453dcacd466f629a86dc73017dd75d32a49a2ad02cab47bc480f0961cd9ba205caa36369da762285fedf84785dc260e68910a1f23cbeb9f" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/PGRANK.hpe" name="PGRANK" package="br.ufc.mdcc.hpcshelf.gust.example.pgr" version="1.0.0.0">
        <visualDescription h="60" w="100" x="374" y="345">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="181" x="118" y="348">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###673767675"/>
          <parameter formFieldId="key_type" varName="TKey"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="137" y="20"/>
          </unitBounds>
        </port>
        <port localRef="output" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="134" x="534" y="339">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###332043094"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="9" y="20"/>
          </unitBounds>
        </port>
        <port localRef="graph_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="56" w="225" x="122" y="419">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###1485765952"/>
          <parameter formFieldId="key_type" varName="X###328507948"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="189" y="15"/>
          </unitBounds>
        </port>
        <port localRef="output_gif" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="157" x="521" y="415">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###52625599"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="reduce_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IPGRANKImpl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.DirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl &#xA;{&#xA;&#x9;public abstract class BaseIPGRANKImpl: Computation, BaseIPGRANK&#xA;&#x9;{&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> output_gif = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> Output_gif&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_gif == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_gif = (IIterator&lt;IKVPair&lt;IInteger, IInputFormat>>) Services.getPort(&quot;output_gif&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_gif;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>> graph = null;&#xA;&#x9;&#x9;public IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>> Graph&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph = (IDirectedGraph&lt;IDataContainerKV&lt;IVertex, IEdgeWeighted&lt;IVertex>>, IVertex, IEdgeWeighted&lt;IVertex>>) Services.getPort(&quot;graph&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> graph_values = null;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> Graph_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph_values = (IKVPair&lt;IInteger, IIterator&lt;IInputFormat>>) Services.getPort(&quot;graph_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>> output = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>> Output&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output = (IIterator&lt;IKVPair&lt;IInteger, IDataPGRANK>>) Services.getPort(&quot;output&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>> input_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>> Input_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IInteger, IIterator&lt;IDataPGRANK>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIPGRANKImpl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/BaseIPGRANKImpl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.common.Integer/bin/1.0.0.0/IInteger.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.InputFormat/bin/1.0.0.0/IInputFormat.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK/bin/1.0.0.0/IDataPGRANK.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/bin/1.0.0.0/BaseIPGRANK.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Concurrent;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.DataPGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.DirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerKV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeWeighted;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl {&#xA;&#x9;public class IPGRANKImpl : BaseIPGRANKImpl, IPGRANK {&#xA;&#xA;&#x9;&#x9;private IDirectedGraphInstance&lt;IVertex, IEdgeWeighted&lt;IVertex>, int, IEdgeInstance&lt;IVertex, int>> g = null;&#xA;&#x9;&#x9;private int[] partition = null;&#xA;&#x9;&#x9;private bool[]  partition_own = null;&#xA;&#x9;&#x9;private int partition_size = 0;&#xA;&#x9;&#x9;private bool[] emite;&#xA;&#x9;&#x9;private int partid = 0;&#xA;&#x9;&#x9;private int halt_sum = 1;&#xA;&#x9;&#x9;private IDictionary&lt;int, float>[] messages = null;&#xA;&#xA;&#x9;&#x9;public override void main() {} &#xA;&#x9;&#x9;public override void after_initialize() { }&#xA;&#x9;&#x9;public bool isGhost(int v){ return !partition_own[this.partition [v - 1]]; }&#xA;&#xA;&#x9;&#x9;#region Create Directed Graph Weight&#xA;&#x9;&#x9;public void graph_creator(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>> input_gifs_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>>)Graph_values.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInputFormat> vgifs = (IIteratorInstance&lt;IInputFormat>)input_gifs_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;if (partition_own==null){&#xA;&#x9;&#x9;&#x9;&#x9;if (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IInputFormatInstance gif = (IInputFormatInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition = gif.PartitionTABLE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_size = gif.PARTITION_SIZE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g = Graph.newInstance (gif.VSIZE);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingLoops = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingMultipleEdges = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;graph_creator_aux (gif);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own = new bool[partition_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own [gif.PARTID] = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.partid = gif.PARTID;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;graph_creator_aux ((IInputFormatInstance)o);&#xA;&#x9;&#x9;&#x9;&#x9;partition_own [((IInputFormatInstance)o).PARTID] = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void graph_creator_aux(IInputFormatInstance gif){&#xA;&#x9;&#x9;&#x9;bool weighted = gif.Weight.Length==gif.Source.Length; float f=1.0f;&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; gif.ESIZE;i++) {&#xA;&#x9;&#x9;&#x9;&#x9;int s = gif.Source [i]; &#xA;&#x9;&#x9;&#x9;&#x9;int t = gif.Target [i];&#xA;&#x9;&#x9;&#x9;&#x9;if(weighted) f = gif.Weight [i];&#xA;&#x9;&#x9;&#x9;&#x9;g.addVertex (s);&#xA;&#x9;&#x9;&#x9;&#x9;g.addVertex (t);&#xA;&#x9;&#x9;&#x9;&#x9;g.noSafeAdd (s, t, f);&#xA;&#x9;&#x9;&#x9;&#x9;if (s == 0 || t==0) { throw new ArgumentNullException (&quot;WARNING: Vertex id is 0! &quot;); }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>> output_gifs_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>>)Output_gif.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IInputFormat> item = (IKVPairInstance&lt;IInteger,IInputFormat>)Output_gif.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = gif.PARTID;&#xA;&#x9;&#x9;&#x9;item.Value = gif;&#xA;&#x9;&#x9;&#x9;output_gifs_instance.put (item);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region Algorithm implementation&#xA;&#x9;&#x9;public void startup_push() {&#xA;&#x9;&#x9;&#x9;int v = 1; float distance_min; emite = new bool[partition_size]; emite[this.partid] = true; // Prepara source vertex numero 1&#xA;&#x9;&#x9;&#x9;messages = new Dictionary&lt;int, float>[partition_size]; //Preparar buffer de mensagens&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; partition_size; i++)&#xA;&#x9;&#x9;&#x9;&#x9;messages[i] = new Dictionary&lt;int, float> ();&#xA;&#xA;&#x9;&#x9;&#x9;if (g.containsVertex (v)) {&#xA;&#x9;&#x9;&#x9;&#x9;messages[partition [v - 1]][v]=0f;&#xA;&#x9;&#x9;&#x9;&#x9;Queue&lt;int> queue = new Queue&lt;int> (); queue.Enqueue (v);&#xA;&#x9;&#x9;&#x9;&#x9;while (queue.Count > 0) { // Busca em profundidade&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;v = queue.Dequeue ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;float v_distance_min_candidate = messages[partition [v - 1]][v];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;KeyValuePair&lt;int, float>> vneighbors = g.iteratorVertexWeightOf (v); //g.iteratorOutgoingVertexWeightOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (vneighbors.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int n = vneighbors.Current.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;float n_distance_min_candidate = vneighbors.Current.Value+v_distance_min_candidate; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [n - 1]].TryGetValue(n,out distance_min) || distance_min > n_distance_min_candidate) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [n - 1]] [n] = n_distance_min_candidate;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queue.Enqueue (n);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emite[partition [n - 1]] = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;gust0 ();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void gust0(){ //emite sa&#xed;das&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>> output_value_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IDataPGRANK>>)Output.Instance;&#xA;&#xA;&#x9;&#x9;&#x9;bool any_emite = false;&#xA;&#x9;&#x9;&#x9;foreach (bool any in emite) &#xA;&#x9;&#x9;&#x9;&#x9;any_emite = any_emite || any;&#xA;&#x9;&#x9;&#x9;if (!any_emite &amp;&amp; halt_sum == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;output_value_instance.finish (); // TerminatedFunctionPGRANK &#xe9; avisado com um finish(), preparando-se para a emiss&#xe3;o definitiva de sa&#xed;da&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataPGRANK> ITEM = (IKVPairInstance&lt;IInteger,IDataPGRANK>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)ITEM.Key).Value = this.partid;&#xA;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Path_size = messages [((IIntegerInstance)ITEM.Key).Value];&#xA;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Halt = 0;&#xA;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (ITEM);&#xA;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;for (int i = 0; i &lt; partition_size; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IDataPGRANK> ITEM = (IKVPairInstance&lt;IInteger,IDataPGRANK>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IIntegerInstance)ITEM.Key).Value = i;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (partition_own [i] || !emite [i])&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Path_size = new Dictionary&lt;int, float> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Path_size = messages [i];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataPGRANKInstance)ITEM.Value).Halt = any_emite ? 1 : 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output_value_instance.put (ITEM);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;emite = new bool[partition_size];&#xA;&#x9;&#x9;&#x9;halt_sum = 0;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void pull() {&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IDataPGRANK>> input_values_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IDataPGRANK>>)Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IIntegerInstance ikey = (IIntegerInstance)input_values_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IDataPGRANK> ivalues = (IIteratorInstance&lt;IDataPGRANK>)input_values_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o; float distance_min;&#xA;&#x9;&#x9;&#x9;while (ivalues.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;IDataPGRANKInstance VALUE = (IDataPGRANKInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;halt_sum += VALUE.Halt;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (KeyValuePair&lt;int, float> kv in VALUE.Path_size) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int v = kv.Key; float v_distance_min_candidate = kv.Value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Queue&lt;int> queue = new Queue&lt;int> ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [v - 1]].TryGetValue (v, out distance_min) || distance_min > v_distance_min_candidate) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [v - 1]] [v] = v_distance_min_candidate;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queue.Enqueue (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (queue.Count > 0) { // Busca em profundidade&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v = queue.Dequeue ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v_distance_min_candidate = messages [partition [v - 1]] [v];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;KeyValuePair&lt;int, float>> vneighbors = g.iteratorVertexWeightOf (v); //g.iteratorOutgoingVertexWeightOf (v);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while (vneighbors.MoveNext ()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int n = vneighbors.Current.Key;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;float n_distance_min_candidate = vneighbors.Current.Value + v_distance_min_candidate; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!messages [partition [n - 1]].TryGetValue (n, out distance_min) || distance_min > n_distance_min_candidate) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;messages [partition [n - 1]] [n] = n_distance_min_candidate;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;queue.Enqueue (n);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;emite [partition [n - 1]] = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;&#xA;" name="IPGRANKImpl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/IPGRANKImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANKImpl/bin/1.0.0.0/BaseIPGRANKImpl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.pgr.PGRANK/bin/1.0.0.0/IPGRANK.dll</dependency>
        </file>
      </sources>
      <visualDescription h="43" w="182" x="272" y="195">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IPGRANKImpl" multiple="false" private="false" replica="0" uRef="reduce_function" visibleInterface="true">
      <super cRef="base" uRef="reduce_function"/>
      <visualDescription h="40" w="190" x="301" y="274"/>
    </unit>
  </componentInfo>
</component:component>