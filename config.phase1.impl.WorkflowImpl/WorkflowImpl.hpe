<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000070c48f350e0b7a179a8bd59015a2d21099f7898fcc6a0cfdcca135178f193a0e5c4f04b90169f8ff848d78508b4dec5f3dc4d18e67421fc9f0d666022dc0da7641f9a157d654c47c0983d5ed7540772da4bcaf41f9020aee34e2c3c88f447679457499d3ea12aa7fb658feabe052c49e053755acae8ec843cc35125e4f8ecb6" isAbstract="false" kind="Computation" name="WorkflowImpl" packagePath="config.phase1.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000b3a809d84d4cd04ff103e31a16fd6e8775d5f5058210513d4a9b042416af3d0603bce5fb4f671ea60406152192e337cea58891b5924d38da40be41bbe0ae2b59a5da735a9b4784f4e0abcff91a6c3819f50a8ea7d0d238d5cc171e26b77bf236bc053d3605ab610f18c9b962cb7c37c7bff314087f90e142300295ab99ad5693" localRef="base" location="config.phase1.Workflow/Workflow.hpe" name="Workflow" package="config.phase1" version="1.0.0.0">
        <visualDescription h="50" w="100" x="453" y="341">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="maintainer" varName="M"/>
        <port localRef="platform_SAFe" location="br.ufc.mdcc.hpcshelf.platform.Platform/Platform.hpe" multiple="false" name="Platform" package="br.ufc.mdcc.hpcshelf.platform" exposed="true">
          <visualDescription h="46" w="165" x="156" y="409">
            <color b="20" g="20" r="20"/>
          </visualDescription>
          <parameter formFieldId="maintainer" varName="M"/>
          <unitBounds parallel="true" uRef="node">
            <visualDescription h="30" w="20" x="160" y="13"/>
          </unitBounds>
        </port>
        <port localRef="task_gusty" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="241" x="621" y="346">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###890345954"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_split_first" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="278" x="100" y="261">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###378396582"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="236" y="6"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_split_next" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="261" x="577" y="260">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###1012274907"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="10" y="10"/>
          </unitBounds>
        </port>
        <port localRef="task_binding_data" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" multiple="false" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="true">
          <visualDescription h="42" w="255" x="103" y="337">
            <color b="243" g="217" r="217"/>
          </visualDescription>
          <parameter formFieldId="task_port_type" varName="X###938910415"/>
          <unitBounds parallel="true" uRef="peer">
            <visualDescription h="30" w="20" x="215" y="5"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="workflow_unit">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent localRef="maintainer" location="br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost/SAFeHost.hpe" multiple="false" name="SAFeHost" package="br.ufc.mdcc.hpcshelf.platform.maintainer" exposed="false">
      <visualDescription h="100" w="100" x="0" y="0">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="safe_host">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="maintainer" direct="true" varName="M"/>
    <interface iRef="IWorkflowImpl" nArgs="1">
      <slice isRef="task_binding_split_first">
        <originRef cRef="task_binding_split_first" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_data">
        <originRef cRef="task_binding_data" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="platform_SAFe">
        <originRef cRef="platform_SAFe" iRef="IProcessingNode"/>
        <visualDescription h="20" w="20" x="10" y="10"/>
      </slice>
      <slice isRef="task_binding_split_next">
        <originRef cRef="task_binding_split_next" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <slice isRef="task_gusty">
        <originRef cRef="task_gusty" iRef="ITaskPort"/>
        <visualDescription h="15" w="15" x="10" y="10"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="// ------------------------------------------------------------------------------&#xA;//  &lt;autogenerated>&#xA;//      This code was generated by a tool.&#xA;//      Mono Runtime Version: 4.0.30319.17020&#xA;// &#xA;//      Changes to this file may cause incorrect behavior and will be lost if &#xA;//      the code is regenerated.&#xA;//  &lt;/autogenerated>&#xA;// ------------------------------------------------------------------------------&#xA;using br.ufc.mdcc.hpcshelf.platform.Maintainer;&#xA;using System;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using System.Threading;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeAdvance;&#xA;using br.ufc.mdcc.hpcshelf.mapreduce.port.task.TaskPortTypeData;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpcshelf.platform.maintainer.SAFeHost;&#xA;using config.phase1.Workflow;&#xA;&#xA;&#xA;namespace config.phase1.impl.WorkflowImpl {&#xA;    &#xA;    &#xA;&#x9;public class IWorkflowImpl&lt;M> :br.ufc.pargo.hpe.kinds.Computation ,IWorkflow&lt;M> &#xA;&#x9;&#x9;where M:ISAFeHost&#xA;&#x9;{ // P.S.: Workflow tipo BSP usando apenas um processo de reducao ou gusty &#xA;&#x9;&#x9;// A l&#xf3;gica do workflow n&#xe3;o foi alterada, usando o workflow gerado automaticamente para o MapReduce. &#xA;&#x9;&#x9;// A &#xfa;nica mudan&#xe7;a ocorre nos retornos do gets, apontando para o mesmo objeto: &#xA;&#x9;&#x9;// task_map=task_gusty, task_reduce=task_gusty, task_binding_shuffle=task_binding_split_next)&#xA;&#x9;&#x9;private void read_data_source()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;read_data_source&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;private void split_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;split_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void map_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;map_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void shuffle_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;shuffle_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void reduce_perform()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;reduce_perform&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private void write_sink_source()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (&quot;write_sink_source&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void main() &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.TraceFlag = Task_map.TraceFlag = Task_reduce.TraceFlag = Task_binding_shuffle.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;&#xA;&#x9;&#x9;&#x9;Task_binding_data.TraceFlag = Task_binding_shuffle.TraceFlag = Task_binding_split_first.TraceFlag = Task_binding_split_next.TraceFlag = true;&#xA;&#xA;&#x9;&#x9;&#x9;IActionFutureSet future_iteration = null;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 2-1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_split_first_chunk_ready = null;&#xA;&#x9;&#x9;    Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_first_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_split_first_chunk_ready = future_split_first_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration = future_split_first_chunk_ready.createSet ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 2-2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_split_next_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_split_next_chunk_ready = future_split_next_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_next_chunk_ready)&#x9;;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 3&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_map_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_map.invoke (ITaskPortAdvance.CHUNK_READY, out future_map_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_map_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_shuffle_chunk_ready = null; &#xA;&#x9;&#x9;&#x9;Task_binding_shuffle.invoke (ITaskPortAdvance.CHUNK_READY, out future_shuffle_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_shuffle_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 4&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_reduce_chunk_ready = null;&#xA;&#x9;&#x9;&#x9;Task_reduce.invoke (ITaskPortAdvance.CHUNK_READY, out future_reduce_chunk_ready);&#xA;&#x9;&#x9;&#x9;int action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_reduce_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 5&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IActionFuture future_data_terminate = null; &#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.TERMINATE, out future_data_terminate);&#xA;&#x9;&#x9;&#x9;future_iteration.addAction (future_data_terminate);&#xA;&#x9;&#x9;&#x9;int action_id_data_terminate = future_data_terminate.GetHashCode ();&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 6-1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.READ_SOURCE);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 6-2&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM);&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 7&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;IList&lt;Thread> bag_of_tasks = new List&lt;Thread> ();&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;bool terminate = false;&#xA;&#x9;&#x9;&#x9;do &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (this.ThisFacetInstance + &quot;/&quot; + this.Rank + &quot;: WORKFLOW 8 - LOOP&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture action = future_iteration.waitAny ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int action_id = action.GetHashCode();&#xA;&#x9;&#x9;&#x9;&#x9;if (action_id == action_id_split_first_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t1 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE MAPPER READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_map.invoke (ITaskPortAdvance.READ_CHUNK); &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE MAPPER READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_map_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_map_perform = Task_map.invoke (ITaskPortAdvance.PERFORM, map_perform, out future_map_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE SPLITTER CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t1.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t2 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER READ_CHUNK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER PERFORM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.PERFORM);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER READ_CHUNK/PERFORM - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_chunk_ready_ = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_first.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_split_first_chunk_ready = future_split_chunk_ready_.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t2);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t2.Start();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_map_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_map.invoke (ITaskPortAdvance.CHUNK_READY, out future_map_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_map_chunk_ready = future_map_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_map_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SHUFFLER READ_CHUNK - BEFORE&quot;);  // 110 executados (o 48 completou nos pares, mas n&#xe3;o progrediu aqui (????), motivo do erro.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_shuffle.invoke (ITaskPortAdvance.READ_CHUNK);   // &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SHUFFLER READ_CHUNK - AFTER&quot;);   // 47 completados &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_shuffle_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_shuffle_perform = Task_binding_shuffle.invoke (ITaskPortAdvance.PERFORM, shuffle_perform, out future_shuffle_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE MAPPER CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 2&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_shuffle_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_shuffle.invoke (ITaskPortAdvance.CHUNK_READY, out future_shuffle_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_shuffle_chunk_ready = future_shuffle_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_shuffle_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE REDUCER READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_reduce.invoke (ITaskPortAdvance.READ_CHUNK); // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE REDUCER READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_reduce_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_reduce_perform = Task_reduce.invoke (ITaskPortAdvance.PERFORM, reduce_perform, out future_reduce_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE SHUFFLER CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 3&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_reduce_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Task_reduce.invoke (ITaskPortAdvance.CHUNK_READY, out future_reduce_chunk_ready);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_reduce_chunk_ready = future_reduce_chunk_ready.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_reduce_chunk_ready);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);  // ****&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_split_perform = Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM, split_perform, out future_split_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE REDUCER CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 4&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if  (action_id == action_id_split_next_chunk_ready)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t1 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE MAP READ_CHUNK NEXT - BEFORE&quot;);  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_map.invoke (ITaskPortAdvance.READ_CHUNK);   // &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE MAP READ_CHUNK NEXT - AFTER&quot;);    &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_map_perform = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Thread thread_map_perform = Task_map.invoke (ITaskPortAdvance.PERFORM, map_perform, out future_map_perform);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;END INVOKE SPLIT NEXT CHUNK_READY&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t1.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t2 = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.READ_CHUNK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT PERFORM&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.PERFORM);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE SPLITTER NEXT READ_CHUNK/PERFORM - AFTER&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IActionFuture future_split_next_chunk_ready_ = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_split_next.invoke (ITaskPortAdvance.CHUNK_READY, out future_split_next_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action_id_split_next_chunk_ready = future_split_next_chunk_ready_.GetHashCode ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;future_iteration.addAction(future_split_next_chunk_ready_);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 1&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t2);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t2.Start();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 5&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else if (action_id == action_id_data_terminate)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Thread t = new Thread((ThreadStart)delegate() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE DATA WRITE_SINK - BEFORE&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Task_binding_data.invoke (ITaskPortData.WRITE_SINK);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;INVOKE DATA WRITE_SINK - AFTER&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;terminate = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bag_of_tasks.Add(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine (&quot;THREAD LAUNCHED 6&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;UNEXPECTED ERROR: ACTION FUTURE NOT RECOGNIZED ! &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;} while (!terminate) ;&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine(&quot;WORKFLOW FINISHED ! &quot;);&#xA;&#xA;&#x9;&#x9;&#x9;foreach (Thread t in bag_of_tasks)&#xA;&#x9;&#x9;&#x9;&#x9;t.Join ();&#xA;&#xA;        }&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeData> task_binding_data = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeData> Task_binding_data &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_binding_data == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_data = (ITaskPort&lt;ITaskPortTypeData>)this.Services.getPort (&quot;task_binding_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_data;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_first = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_first&#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   if (task_binding_split_first == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_split_first = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_split_first&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_split_first;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_split_next = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_split_next&#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   if (task_binding_split_next == null)&#xA;&#x9;&#x9;&#x9;&#x9;task_binding_split_next = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_split_next&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_binding_split_next;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;//&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_binding_shuffle = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_binding_shuffle &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;return Task_binding_split_next;&#xA;//&#x9;&#x9;&#x9;&#x9;if (task_binding_shuffle == null)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;task_binding_shuffle = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_binding_shuffle&quot;);&#xA;//&#x9;&#x9;&#x9;&#x9;return task_binding_shuffle;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_gusty = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_reduce &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{   &#xA;&#x9;&#x9;&#x9;&#x9;if (task_gusty == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;task_gusty = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_gusty&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return task_gusty;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;//&#x9;&#x9;private ITaskPort&lt;ITaskPortTypeAdvance> task_map = null;&#xA;&#x9;&#x9;protected ITaskPort&lt;ITaskPortTypeAdvance> Task_map &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{  &#xA;&#x9;&#x9;&#x9;&#x9;return this.Task_reduce;&#xA;//&#x9;&#x9;&#x9;&#x9;if (task_map == null)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;task_map = (ITaskPort&lt;ITaskPortTypeAdvance>) this.Services.getPort (&quot;task_map&quot;);&#xA;//&#x9;&#x9;&#x9;&#x9;return task_map;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;    }&#xA;}&#xA;" name="IWorkflowImpl.cs" srcType="user" uri="config.phase1.impl.WorkflowImpl/bin/1.0.0.0/IWorkflowImpl.dll" versionId="1.0.0.0"/>
      </sources>
      <visualDescription h="36" w="144" x="421" y="164">
        <color b="20" g="20" r="20"/>
      </visualDescription>
      <port name="task_binding_split_first">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split_first" sRef="task_binding_split_first"/>
      </port>
      <port name="task_binding_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_data" sRef="task_binding_data"/>
      </port>
      <port name="platform_SAFe">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="platform_SAFe" sRef="platform_SAFe"/>
      </port>
      <port name="task_binding_split_next">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_binding_split_next" sRef="task_binding_split_next"/>
      </port>
      <port name="task_gusty">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="task_gusty" sRef="task_gusty"/>
      </port>
      <parameter iname="ISAFeHost" order="0" parid="maintainer" uname="safe_host" varid="M"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IWorkflowImpl" multiple="false" private="false" replica="0" uRef="workflow_unit" visibleInterface="true">
      <super cRef="base" uRef="workflow_unit"/>
      <visualDescription h="46" w="135" x="426" y="248"/>
    </unit>
  </componentInfo>
</component:component>