<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000047636d39667d3df012ad8151d38d893fc01a9dfaefb6f546d4f172b7fe4e51a368aaacf280cbfd1b126dd564feae4ee03e75625b03dc2f5dc3ed518fe1050d3011ae8c989bdfc71ebb36f648441d2cf8b3fffa216b22e7002459815479afe8fe1775fc0f56994268175a3eb43a8b2828d31f2a20020115cec5b41320ed2df58d" isAbstract="false" kind="Computation" name="TC2Impl" packagePath="br.ufc.mdcc.hpcshelf.gust.example.tc3">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000089e59ae8dcbf949b9d67963cbd3301ac293e60dba7dbc5f10417edba70d959e883852c7cc93af024b0196d520fc36730bc3a384bb62fdf38f4e627a22730d371647c35a9ce7ac143a295d37b24fd965cf6ef4251eb950bb6f5586f08a2884c45847a3dd5d49d1397144d80553bbabc0b7c2bdef1d56bdc51be8901444756dab6" localRef="base" location="br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2/TC2.hpe" name="TC2" package="br.ufc.mdcc.hpcshelf.gust.example.tc3" version="1.0.0.0">
        <visualDescription h="60" w="100" x="358" y="302">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <port localRef="input_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="181" x="107" y="280">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###1561314602"/>
          <parameter formFieldId="key_type" varName="TKey"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="137" y="20"/>
          </unitBounds>
        </port>
        <port localRef="output" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="134" x="519" y="286">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###911833121"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="9" y="20"/>
          </unitBounds>
        </port>
        <port localRef="graph_values" location="br.ufc.mdcc.common.KVPair/KVPair.hpe" multiple="false" name="KVPair" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="56" w="225" x="103" y="368">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="value_type" varName="X###735959655"/>
          <parameter formFieldId="key_type" varName="X###1915598512"/>
          <unitBounds parallel="false" uRef="kv_pair">
            <visualDescription h="20" w="20" x="189" y="15"/>
          </unitBounds>
        </port>
        <port localRef="output_gif" location="br.ufc.mdcc.common.Iterator/Iterator.hpe" multiple="false" name="Iterator" package="br.ufc.mdcc.common" exposed="true">
          <visualDescription h="60" w="157" x="520" y="363">
            <color b="203" g="192" r="255"/>
          </visualDescription>
          <parameter formFieldId="item_type" varName="X###389355360"/>
          <unitBounds parallel="false" uRef="iterator">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="false" uRef="gusty_function">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="ITC2Impl" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;using br.ufc.mdcc.common.Data;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeBasic;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2Impl &#xA;{&#xA;&#x9;public abstract class BaseITC2Impl: Computation, BaseITC2&#xA;&#x9;{&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> output_gif = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IInteger, IInputFormat>> Output_gif&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output_gif == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output_gif = (IIterator&lt;IKVPair&lt;IInteger, IInputFormat>>) Services.getPort(&quot;output_gif&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output_gif;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> graph = null;&#xA;&#x9;&#x9;public IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>> Graph&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph = (IUndirectedGraph&lt;IDataContainerV&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>>, IVertexBasic, IEdgeBasic&lt;IVertexBasic>>) Services.getPort(&quot;graph&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;//&#x9;&#x9;private IData continuation_value = null;&#x9;&#x9;&#xA;//&#x9;&#x9;protected IData Continuation_value&#xA;//&#x9;&#x9;{&#xA;//&#x9;&#x9;&#x9;get&#xA;//&#x9;&#x9;&#x9;{&#xA;//&#x9;&#x9;&#x9;&#x9;if (this.continuation_value == null)&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;this.continuation_value = (IData) Services.getPort(&quot;continuation_value&quot;);&#xA;//&#x9;&#x9;&#x9;&#x9;return this.continuation_value;&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IKVPair&lt;IVertex, IIterator&lt;IDataTriangle>> input_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IVertex, IIterator&lt;IDataTriangle>> Input_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.input_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.input_values = (IKVPair&lt;IVertex, IIterator&lt;IDataTriangle>>) Services.getPort(&quot;input_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.input_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> graph_values = null;&#xA;&#xA;&#x9;&#x9;public IKVPair&lt;IInteger, IIterator&lt;IInputFormat>> Graph_values&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.graph_values == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.graph_values = (IKVPair&lt;IInteger, IIterator&lt;IInputFormat>>) Services.getPort(&quot;graph_values&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.graph_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private IIterator&lt;IKVPair&lt;IVertex, IDataTriangle>> output = null;&#xA;&#xA;&#x9;&#x9;public IIterator&lt;IKVPair&lt;IVertex, IDataTriangle>> Output&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.output == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.output = (IIterator&lt;IKVPair&lt;IVertex, IDataTriangle>>) Services.getPort(&quot;output&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.output;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="BaseITC2Impl.cs" srcType="base" uri="br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2Impl/bin/1.0.0.0/BaseITC2Impl.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.common.Iterator/bin/1.0.0.0/IIterator.dll</dependency>
          <dependency>br.ufc.mdcc.common.KVPair/bin/1.0.0.0/IKVPair.dll</dependency>
          <dependency>br.ufc.mdcc.common.Integer/bin/1.0.0.0/IInteger.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.InputFormat/bin/1.0.0.0/IInputFormat.dll</dependency>
          <dependency>br.ufc.mdcc.common.Data/bin/1.0.0.0/IData.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.graph.Vertex/bin/1.0.0.0/IVertex.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle/bin/1.0.0.0/IDataTriangle.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2/bin/1.0.0.0/BaseITC2.dll</dependency>
        </file>
        <file contents="using System;&#xA;using System.Collections.Generic;&#xA;using System.Collections.Concurrent;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Graph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.UndirectedGraph;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainer;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.container.DataContainerV;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Vertex;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.VertexBasic;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.Edge;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.EdgeBasic;&#xA;using br.ufc.mdcc.common.Integer;&#xA;using br.ufc.mdcc.common.Iterator;&#xA;using br.ufc.mdcc.common.KVPair;&#xA;using br.ufc.mdcc.hpcshelf.gust.example.tc.DataTriangle;&#xA;using br.ufc.mdcc.hpcshelf.gust.graph.InputFormat;&#xA;&#xA;namespace br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2Impl {&#xA;&#x9;public class ITC2Impl : BaseITC2Impl, ITC2 {&#xA;&#xA;&#x9;&#x9;private IUndirectedGraphInstance&lt;IVertexBasic, IEdgeBasic&lt;IVertexBasic>, int, IEdgeInstance&lt;IVertexBasic, int>> g = null;&#xA;&#x9;&#x9;private int[] partition = null;&#xA;&#x9;&#x9;private bool[]  partition_own = null;&#xA;&#x9;&#x9;private int partid = 0;&#xA;&#x9;&#x9;private int partition_size = 0;&#xA;&#x9;&#x9;private int count = 0;&#xA;&#x9;&#x9;private IDictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>> triangles = new Dictionary&lt;int, IList&lt;KeyValuePair&lt;int,int>>>();&#xA;&#xA;&#x9;&#x9;public override void main() {}&#xA;&#x9;&#x9;public override void after_initialize() { }&#xA;&#xA;&#x9;&#x9;public bool isGhost(int v){ return !partition_own[this.partition [v - 1]]; }&#xA;&#xA;&#x9;&#x9;#region Create Undirected Graph&#xA;&#x9;&#x9;public void graph_creator(){ &#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>> input_gifs_instance = (IKVPairInstance&lt;IInteger,IIterator&lt;IInputFormat>>)Graph_values.Instance;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IInputFormat> vgifs = (IIteratorInstance&lt;IInputFormat>)input_gifs_instance.Value;&#xA;&#xA;&#x9;&#x9;&#x9;object o;&#xA;&#x9;&#x9;&#x9;if (partition_own==null){&#xA;&#x9;&#x9;&#x9;&#x9;if (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IInputFormatInstance gif = (IInputFormatInstance)o;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition = gif.PartitionTABLE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partid = gif.PARTID; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_size = gif.PARTITION_SIZE; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g = Graph.newInstance (gif.VSIZE); // pega-se uma instancia do graph, com vertices do tipo inteiro, com tamanho previsto VSIZE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingLoops = false; // n&#xe3;o ser&#xe3;o premitidos la&#xe7;os&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.DataContainer.AllowingMultipleEdges = false; // n&#xe3;o ser&#xe3;o permitidas m&#xfa;ltiplas arestas&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;graph_creator_aux (gif); // inserem-se dados no grafo&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own = new bool[partition_size];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;partition_own [partid] = true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;while (vgifs.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;graph_creator_aux ((IInputFormatInstance)o);&#xA;&#x9;&#x9;&#x9;&#x9;partition_own [((IInputFormatInstance)o).PARTID] = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;private void graph_creator_aux(IInputFormatInstance gif){&#xA;&#x9;&#x9;&#x9;for (int i = 0; i &lt; gif.ESIZE;) {&#xA;&#x9;&#x9;&#x9;&#x9;if (gif.Target [i] != 0) { // Ser&#xe1; usada a forma canonica: i->j, onde i&lt;j, i>0 j>0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int s = gif.Source [i] &lt; gif.Target [i] ? gif.Source [i] : gif.Target [i]; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int t = gif.Target [i] > gif.Source [i] ? gif.Target [i] : gif.Source [i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (s);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.addVertex (t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;g.noSafeAdd (s, t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;i++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>> output_gifs_instance = (IIteratorInstance&lt;IKVPair&lt;IInteger,IInputFormat>>)Output_gif.Instance;&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IInteger,IInputFormat> item = (IKVPairInstance&lt;IInteger,IInputFormat>)Output_gif.createItem ();&#xA;&#x9;&#x9;&#x9;((IIntegerInstance)item.Key).Value = gif.PARTID;&#xA;&#x9;&#x9;&#x9;item.Value = gif;&#xA;&#x9;&#x9;&#x9;output_gifs_instance.put (item); // Emite-se gif novamente para que a func&#xe3;o de particionamento do conector receba a instancia PartitionTABLE.&#xA;&#x9;&#x9;}                                    // Isso &#xe9; necess&#xe1;rio no caso de IKey ser do tipo IVertex.&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;#region Algorithm implementation&#xA;&#x9;&#x9;public void startup_push(){ }&#xA;&#xA;&#x9;&#x9;public void pull(){&#xA;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IIterator&lt;IDataTriangle>> input_values_instance = (IKVPairInstance&lt;IVertex,IIterator&lt;IDataTriangle>>)Input_values.Instance;&#xA;&#x9;&#x9;&#x9;IVertexInstance ikey = (IVertexInstance)input_values_instance.Key;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IDataTriangle> ivalues = (IIteratorInstance&lt;IDataTriangle>)input_values_instance.Value;&#xA;&#x9;&#x9;&#x9;IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>> output_value = (IIteratorInstance&lt;IKVPair&lt;IVertex,IDataTriangle>>)Output.Instance;&#xA;&#x9;&#x9;&#x9;object o; int w = ikey.Id; &#xA;&#xA;&#x9;&#x9;&#x9;while (ivalues.fetch_next (out o)) {&#xA;&#x9;&#x9;&#x9;&#x9;IEnumerator&lt;int> wneighbors = g.iteratorNeighborsOf (w);&#xA;&#x9;&#x9;&#x9;&#x9;while (wneighbors.MoveNext ()) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int z = wneighbors.Current;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (w &lt; z) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IKVPairInstance&lt;IVertex,IDataTriangle> item = (IKVPairInstance&lt;IVertex,IDataTriangle>)Output.createItem ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IVertexInstance)item.Key).Id = ((IDataTriangleInstance)o).V;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataTriangleInstance)item.Value).V = w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((IDataTriangleInstance)item.Value).W = z;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;output_value.put (item);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void gust0(){ }&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;" name="ITC2Impl.cs" srcType="user" uri="br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2Impl/bin/1.0.0.0/ITC2Impl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2Impl/bin/1.0.0.0/BaseITC2Impl.dll</dependency>
          <dependency>br.ufc.mdcc.hpcshelf.gust.example.tc3.TC2/bin/1.0.0.0/ITC2.dll</dependency>
        </file>
      </sources>
      <visualDescription h="43" w="199" x="147" y="124">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="ITC2Impl" multiple="false" private="false" replica="0" uRef="gusty_function" visibleInterface="true">
      <super cRef="base" uRef="gusty_function"/>
      <visualDescription h="40" w="190" x="297" y="209"/>
    </unit>
  </componentInfo>
</component:component>